@page "/login"
@layout LoginLayout
@using HospitalPortal.WEB.Models
@using HospitalPortal.WEB.Services
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider AuthStateProvider
@inject ILoginService LoginService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<PageTitle>Log-In</PageTitle>

<EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="login-container">
		<h2 class="text-center mb-4" style="font-weight: bold;">Login</h2>

		<div class="form-group">
			<label class="form-label">Email:</label>
			<InputText id="email" class="form-control" @bind-Value="@loginRequest.Email" />
		</div>

		<div class="form-group">
			<label class="form-label">Password:</label>
			<InputText id="password" type="password" class="form-control" @bind-Value="@loginRequest.Password" />
		</div>

		<div class="form-group">
			<label class="form-label">Doctor Code (optional):</label>
			<InputText id="doctorCode" class="form-control" @bind-Value="@loginRequest.DoctorCode" />
		</div>

		<div class="button-container">
			<button type="submit" class="btn btn-primary btn-custom">Log In</button>
		</div>

		<div class="text-center mt-4">
			<p>Don't have an account? <a href="/signup" class="btn btn-link">Sign Up Now</a></p>
		</div>
	</div>
</EditForm>
@if (!string.IsNullOrEmpty(errorMessage))
{
	<p class="text-danger">@errorMessage</p>
}

@code {
	private LoginRequest loginRequest = new LoginRequest();
	private string errorMessage;

	private async Task HandleLogin()
	{
		try
		{
			var result = await LoginService.HandleLoginAsync(loginRequest);
			if (!string.IsNullOrEmpty(result.Token))
			{
				var existingToken = await LocalStorage.GetItemAsync<string>("authToken");
				if (!string.IsNullOrEmpty(existingToken))
				{
					await LocalStorage.RemoveItemAsync("authToken");
				}
				((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result.Token);
				await LocalStorage.SetItemAsync("authToken", result.Token);
				await AuthStateProvider.GetAuthenticationStateAsync();
				if (result.Role == "Patient")
				{
					Navigation.NavigateTo($"/patient-profile/{result.Id}");
				}
				else if (result.Role == "Doctor")
				{
					Navigation.NavigateTo($"/doctor-profile/{result.Id}");
				}
			}
		}
		catch (Exception ex)
		{
			errorMessage = "Login failed: " + ex.Message;
		}
	}
}
