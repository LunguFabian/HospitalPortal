@using HospitalPortal.WEB.Services
@using HospitalPortal.WEB.Models
@using System.Globalization
@inject IAppointmentService AppointmentService
@inject IDoctorService DoctorService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService
<RadzenTemplateForm TItem="AppointmentCalendarModel" Data="@model" Submit=@OnSubmit>
	<RadzenStack Gap="1rem">
		<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
			<RadzenLabel Text="Start" Style="width: 4rem;" />
			<RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" Style="width: 12rem;" />
			<RadzenRequiredValidator Component="Start" Text="Start is required" />
		</RadzenStack>

		<p>Note: All appointments are 1 hour long.</p>

		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
			<RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
		</RadzenStack>
	</RadzenStack>
</RadzenTemplateForm>

<RadzenNotification />
@code {
	[Parameter]
	public DateTime Start { get; set; }

	[Parameter]
	public DateTime End { get; set; }

	AppointmentCalendarModel model = new AppointmentCalendarModel();

	protected override void OnParametersSet()
	{
		model.Start = Start;
		model.End = model.Start.AddHours(1);
	}

	void OnSubmit(AppointmentCalendarModel model)
	{
		if (model.Start < DateTime.Now)
		{
			NotificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Invalid Date",
					Detail = "You cannot select a date and time in the past.",
					Duration = 4000
				});
		}
		else if (model.Start > DateTime.Now.AddDays(30))
		{
			NotificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Invalid Date",
					Detail = "You cannot make an appointment more than 30 days ahead.",
					Duration = 4000
				});
		}
		else if (model.Start.TimeOfDay > new TimeSpan(15, 0, 0))
		{
			NotificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Invalid Date",
					Detail = "You cannot make an appointment out of the working hours.",
					Duration = 4000
				});
		}
		else if (model.Start < DateTime.Now.AddHours(1))
		{
			NotificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Invalid Date",
					Detail = "You cannot make an appointment less than 1 hour before.",
					Duration = 4000
				});
		}
		else if (model.Start.DayOfWeek == DayOfWeek.Saturday || model.Start.DayOfWeek == DayOfWeek.Sunday)
		{
			NotificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Invalid Date",
					Detail = "You cannot make an appointment in weekend.",
					Duration = 4000
				});
		}
		else
		{
			DialogService.Close(model);
		}
	}
}